# AutoLog Terraform Configuration - Phased Deployment Support
# This configuration supports phased deployment using conditional resources

terraform {
  required_version = ">= 1.0"
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~> 3.0"
    }
  }
  
  # Using local backend for test environment (simpler, no Azure storage required)
  # Uncomment the azurerm backend below if you want to use Azure storage for state
  # backend "azurerm" {
  #   resource_group_name  = "terraform-state-rg"
  #   storage_account_name = "autologtfstate"
  #   container_name       = "tfstate"
  #   key                  = "autolog-${var.environment}.tfstate"
  # }
}

provider "azurerm" {
  features {
    resource_group {
      prevent_deletion_if_contains_resources = false
    }
    key_vault {
      purge_soft_delete_on_destroy = true
    }
  }
}

# Local values
locals {
  name_prefix = "autolog-${var.environment}"
  tags = {
    Environment = var.environment
    Project     = "AutoLog"
    ManagedBy   = "Terraform"
    CostCenter  = "Engineering"
    Version     = "1.0.0"
  }
  
  # Environment-specific configurations
  is_production = var.environment == "prod"
  is_staging    = var.environment == "staging"
  is_dev        = var.environment == "dev"
  
  # Resource sizing based on environment
  db_sku = local.is_production ? "GP_Standard_D4s_v3" : local.is_staging ? "GP_Standard_D2s_v3" : "B_Standard_B1ms"
  db_storage = local.is_production ? 131072 : local.is_staging ? 65536 : 32768  # 128GB, 64GB, 32GB
  
  # Container sizing based on environment
  backend_cpu = local.is_production ? 2.0 : local.is_staging ? 1.0 : 0.5
  backend_memory = local.is_production ? "4Gi" : local.is_staging ? "2Gi" : "1Gi"
  
  logparser_cpu = local.is_production ? 2.0 : local.is_staging ? 1.0 : 0.5
  logparser_memory = local.is_production ? "4Gi" : local.is_staging ? "2Gi" : "1Gi"
  
  ollama_cpu = local.is_production ? 4.0 : local.is_staging ? 2.0 : 1.0
  ollama_memory = local.is_production ? "8Gi" : local.is_staging ? "4Gi" : "2Gi"
  
  # Log level based on environment
  log_level = local.is_production ? "info" : local.is_staging ? "info" : "debug"
  
  # Revision suffix for spot instances (if enabled)
  revision_suffix = var.use_spot_instances ? "spot" : null
}

# =============================================================================
# PHASE 1: Container Registry Infrastructure
# =============================================================================

# Resource Group
resource "azurerm_resource_group" "main" {
  name     = "${var.resource_group_name}-${var.environment}"
  location = var.location
  tags     = local.tags
}

# Container Registry (always enabled for ACR)
resource "azurerm_container_registry" "main" {
  name                = replace("${local.name_prefix}registry", "-", "")
  resource_group_name = azurerm_resource_group.main.name
  location            = azurerm_resource_group.main.location
  sku                 = local.is_production ? "Premium" : "Standard"
  admin_enabled       = true
  tags                = local.tags
}

# =============================================================================
# PHASE 3: Main Infrastructure (Database, Container Apps, etc.)
# =============================================================================

# PostgreSQL Database
resource "azurerm_postgresql_flexible_server" "main" {
  name                   = "${local.name_prefix}-db"
  resource_group_name    = azurerm_resource_group.main.name
  location               = azurerm_resource_group.main.location
  version                = var.db_version
  administrator_login    = "postgres"
  administrator_password = var.db_password
  storage_mb             = local.db_storage
  sku_name               = local.db_sku
  
  # High availability for production only
  dynamic "high_availability" {
    for_each = local.is_production ? [1] : []
    content {
      mode = "ZoneRedundant"
    }
  }
  
  # Backup configuration
  backup_retention_days = var.enable_backup ? var.backup_retention_days : 7
  
  # Zone configuration
  zone = "1"
  
  tags = local.tags
}

# Database
resource "azurerm_postgresql_flexible_server_database" "main" {
  name      = "autolog"
  server_id = azurerm_postgresql_flexible_server.main.id
  collation = "en_US.utf8"
  charset   = "utf8"
}

# Container Apps Environment
resource "azurerm_container_app_environment" "main" {
  name                       = "${local.name_prefix}-env"
  location                   = azurerm_resource_group.main.location
  resource_group_name        = azurerm_resource_group.main.name
  tags                       = local.tags
}

# Container App - Backend (using nginx by default)
resource "azurerm_container_app" "backend" {
  name                         = "${local.name_prefix}-backend"
  container_app_environment_id = azurerm_container_app_environment.main.id
  resource_group_name          = azurerm_resource_group.main.name
  revision_mode                = "Single"

  identity {
    type = "SystemAssigned"
  }
  template {
    container {
      name   = "backend"
      image  = "autologdevregistry.azurecr.io/autolog-backend:prod"
      cpu    = local.backend_cpu
      memory = local.backend_memory

      env {
        name  = "DB_HOST"
        value = azurerm_postgresql_flexible_server.main.fqdn
      }
      env {
        name  = "DB_PORT"
        value = "5432"
      }
      env {
        name  = "DB_NAME"
        value = azurerm_postgresql_flexible_server_database.main.name
      }
      env {
        name  = "DB_USER"
        value = azurerm_postgresql_flexible_server.main.administrator_login
      }
      env {
        name  = "DB_PASSWORD"
        value = azurerm_postgresql_flexible_server.main.administrator_password
      }
      env {
        name  = "DB_SSLMODE"
        value = "require"
      }
      env {
        name  = "JWT_SECRET"
        value = var.jwt_secret
      }
      env {
        name  = "ENVIRONMENT"
        value = var.environment
      }
      env {
        name  = "PORT"
        value = "8080"
      }
      env {
        name  = "LOG_LEVEL"
        value = var.log_level
      }
      env {
        name  = "OLLAMA_MODEL"
        value = var.ollama_model
      }
      # Remove the circular dependency - we'll set this in phase 4
      env {
        name  = "LOGPARSER_URL"
        value = "https://autolog-dev-logparser--0000001.icybeach-e84cf941.centralus.azurecontainerapps.io"  # Default fallback
      }
    }
  }

  ingress {
    external_enabled = true
    target_port     = 5000
    transport       = "http"
    traffic_weight {
      percentage      = 100
      latest_revision = true
    }
  }
}

# Container App - Logparser (using nginx by default)
resource "azurerm_container_app" "logparser" {
  name                         = "${local.name_prefix}-logparser"
  container_app_environment_id = azurerm_container_app_environment.main.id
  resource_group_name          = azurerm_resource_group.main.name
  revision_mode                = "Single"

  identity {
    type = "SystemAssigned"
  }
  template {
    container {
      name   = "logparser"
      image  = "autologdevregistry.azurecr.io/autolog-backend:prod"
      cpu    = local.logparser_cpu
      memory = local.logparser_memory

      env {
        name  = "ENVIRONMENT"
        value = var.environment
      }
      env {
        name  = "PORT"
        value = "5000"
      }
    }
  }

  ingress {
    external_enabled = true
    target_port     = 5000
    transport       = "http"
    traffic_weight {
      percentage      = 100
      latest_revision = true
    }
  }
}

# Container App - Ollama (using official Ollama image with model downloads)
resource "azurerm_container_app" "ollama" {
  name                         = "${local.name_prefix}-ollama"
  container_app_environment_id = azurerm_container_app_environment.main.id
  resource_group_name          = azurerm_resource_group.main.name
  revision_mode                = "Single"

  identity {
    type = "SystemAssigned"
  }
  template {
    container {
      name   = "ollama"
      image  = "ollama/ollama:latest"
      cpu    = local.ollama_cpu
      memory = local.ollama_memory

      env {
        name  = "OLLAMA_HOST"
        value = "0.0.0.0"
      }
      
      # Add startup command to download models
      command = ["/bin/sh", "-c"]
      args = [
        "ollama serve & sleep 10 && ollama pull ${var.ollama_model} && ollama pull ${var.ollama_embed_model} && wait"
      ]
    }
  }

  ingress {
    external_enabled = true
    target_port     = 11434
    transport       = "http"
    traffic_weight {
      percentage      = 100
      latest_revision = true
    }
  }
}

# Role assignments for ACR access (created after container apps)
resource "azurerm_role_assignment" "acr_pull_backend" {
  scope                = azurerm_container_registry.main.id
  role_definition_name = "AcrPull"
  principal_id         = azurerm_container_app.backend.identity[0].principal_id
  depends_on           = [azurerm_container_app.backend]
}

resource "azurerm_role_assignment" "acr_pull_logparser" {
  scope                = azurerm_container_registry.main.id
  role_definition_name = "AcrPull"
  principal_id         = azurerm_container_app.logparser.identity[0].principal_id
  depends_on           = [azurerm_container_app.logparser]
}

resource "azurerm_role_assignment" "acr_pull_ollama" {
  scope                = azurerm_container_registry.main.id
  role_definition_name = "AcrPull"
  principal_id         = azurerm_container_app.ollama.identity[0].principal_id
  depends_on           = [azurerm_container_app.ollama]
}

# =============================================================================
# OUTPUTS
# =============================================================================

# Phase 1 Outputs
output "resource_group_name" {
  description = "Name of the resource group"
  value       = azurerm_resource_group.main.name
}

output "resource_group_location" {
  description = "Location of the resource group"
  value       = azurerm_resource_group.main.location
}

output "container_registry_name" {
  description = "Name of the Azure Container Registry"
  value       = azurerm_container_registry.main.name
}

output "container_registry_login_server" {
  description = "Login server URL for the Azure Container Registry"
  value       = azurerm_container_registry.main.login_server
}

output "container_registry_username" {
  description = "Username for the Azure Container Registry"
  value       = azurerm_container_registry.main.admin_username
  sensitive   = true
}

output "container_registry_password" {
  description = "Password for the Azure Container Registry"
  value       = azurerm_container_registry.main.admin_password
  sensitive   = true
}

# Phase 3 Outputs
output "backend_url" {
  description = "URL of the Backend Container App"
  value       = "https://${azurerm_container_app.backend.latest_revision_fqdn}"
}

output "logparser_url" {
  description = "URL of the Logparser Container App"
  value       = "https://${azurerm_container_app.logparser.latest_revision_fqdn}"
}



output "database_host" {
  description = "Database host"
  value       = azurerm_postgresql_flexible_server.main.fqdn
}

output "database_name" {
  description = "Database name"
  value       = azurerm_postgresql_flexible_server_database.main.name
} 